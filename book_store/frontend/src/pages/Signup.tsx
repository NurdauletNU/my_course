import React, { useState } from "react";
import axios from "axios";
import * as bases from "../components/bases";

const RegistrationForm: React.FC = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [country, setCountry] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [agreeTerms, setAgreeTerms] = useState(false);
  const [error, setError] = useState("");
  const [registrationSuccess, setRegistrationSuccess] = useState(false);

  const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
  const phoneRegex = /^\d{10}$/;
  const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (
      !firstName ||
      !lastName ||
      !country ||
      !phone ||
      !email ||
      !password ||
      !confirmPassword
    ) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.");
      return;
    }

    if (!emailRegex.test(email)) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.");
      return;
    }

    if (!phoneRegex.test(phone)) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä).");
      return;
    }

    if (!passwordRegex.test(password)) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.");
      return;
    }

    if (password !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
      return;
    }

    if (!agreeTerms) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏.");
      return;
    }

    try {
      const response = await axios.post(
        "http://127.0.0.1:8000/api/user/register/",
        {
          firstName,
          lastName,
          country,
          phone,
          email,
          password,
        },
      );
      console.log("–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", response.data);
      setRegistrationSuccess(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", error);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const toggleShowConfirmPassword = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  return (
    <bases.Base1>
      <div className="bg-dark text-secondary px-4 py-5 text-center w-50 m-5 p-5">
        <main className="form-signin w-100 m-auto">
          <form onSubmit={handleSubmit}>
            <h1 className="h3 mb-3 fw-normal">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</h1>

            <div className="form-floating">
              <input
                type="text"
                className="form-control"
                id="firstName"
                placeholder="–ò–º—è"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
              />
              <label htmlFor="firstName">–ò–º—è</label>
            </div>

            <div className="form-floating">
              <input
                type="text"
                className="form-control"
                id="lastName"
                placeholder="–§–∞–º–∏–ª–∏—è"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
              />
              <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
            </div>

            <div className="form-floating">
              <select
                className="form-select"
                id="country"
                value={country}
                onChange={(e) => setCountry(e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</option>
                <option value="–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω">–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</option>
                <option value="–°–®–ê">–°–®–ê</option>
                <option value="–ö–∞–Ω–∞–¥–∞">–ö–∞–Ω–∞–¥–∞</option>
                <option value="–†–æ—Å—Å–∏—è">–†–æ—Å—Å–∏—è</option>
                <option value="–ï–≤—Ä–æ—Å–æ—é–∑">–ï–≤—Ä–æ—Å–æ—é–∑</option>
                <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
              </select>
              <label htmlFor="country">–°—Ç—Ä–∞–Ω–∞</label>
            </div>

            <div className="form-floating">
              <input
                type="tel"
                className="form-control"
                id="phone"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
              <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä</label>
            </div>

            <div className="form-floating">
              <input
                type="email"
                className="form-control"
                id="email"
                placeholder="name@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
              <label htmlFor="email">–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã</label>
            </div>

            <div className="form-floating">
              <input
                type={showPassword ? "text" : "password"}
                className="form-control"
                id="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
              <span
                className="eye-icon"
                onClick={toggleShowPassword}
                style={{
                  cursor: "pointer",
                  position: "absolute",
                  right: "10px",
                  top: "40%",
                  transform: "translateY(-50%)",
                }}
              >
                {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è"}
              </span>
            </div>

            <div className="form-floating">
              <input
                type={showConfirmPassword ? "text" : "password"}
                className="form-control"
                id="confirmPassword"
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
              />
              <label htmlFor="confirmPassword">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
              <span
                className="eye-icon"
                onClick={toggleShowConfirmPassword}
                style={{
                  cursor: "pointer",
                  position: "absolute",
                  right: "10px",
                  top: "40%",
                  transform: "translateY(-50%)",
                }}
              >
                {showConfirmPassword ? "üëÅÔ∏è" : "üëÅÔ∏è"}
              </span>
            </div>

            <div className="form-check text-start my-3">
              <input
                className="form-check-input"
                type="checkbox"
                id="agreeTerms"
                checked={agreeTerms}
                onChange={(e) => setAgreeTerms(e.target.checked)}
                required
              />
              <label className="form-check-label" htmlFor="agreeTerms">
                –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏
              </label>
            </div>

            {error && <p className="text-danger">{error}</p>}
            {registrationSuccess && (
              <p className="text-success">–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</p>
            )}

            <button className="btn btn-primary w-100 py-2" type="submit">
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
            <p className="mt-5 mb-3 text-body-secondary">¬© 2017‚Äì2023</p>
          </form>
        </main>
      </div>
    </bases.Base1>
  );
};

export default RegistrationForm;
